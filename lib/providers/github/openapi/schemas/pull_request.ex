defmodule GitHubOpenAPI.PullRequest do
  @moduledoc """
  Provides struct and type for a PullRequest
  """
  use Apipe.Providers.OpenAPIEncoder

  @type t :: %__MODULE__{
          __info__: map,
          __joins__: map,
          _links: GitHubOpenAPI.PullRequestLinks.t(),
          active_lock_reason: String.t() | nil,
          additions: integer,
          assignee: GitHubOpenAPI.SimpleUser.t() | nil,
          assignees: [GitHubOpenAPI.SimpleUser.t()] | nil,
          author_association: String.t(),
          auto_merge: GitHubOpenAPI.AutoMerge.t() | nil,
          base: GitHubOpenAPI.PullRequestBase.t(),
          body: String.t() | nil,
          changed_files: integer,
          closed_at: DateTime.t() | nil,
          comments: integer,
          comments_url: String.t(),
          commits: integer,
          commits_url: String.t(),
          created_at: DateTime.t(),
          deletions: integer,
          diff_url: String.t(),
          draft: boolean | nil,
          head: GitHubOpenAPI.PullRequestHead.t(),
          html_url: String.t(),
          id: integer,
          issue_url: String.t(),
          labels: [GitHubOpenAPI.PullRequestLabels.t()],
          locked: boolean,
          maintainer_can_modify: boolean,
          merge_commit_sha: String.t() | nil,
          mergeable: boolean | nil,
          mergeable_state: String.t(),
          merged: boolean,
          merged_at: DateTime.t() | nil,
          merged_by: GitHubOpenAPI.SimpleUser.t() | nil,
          milestone: GitHubOpenAPI.Milestone.t() | nil,
          node_id: String.t(),
          number: integer,
          patch_url: String.t(),
          rebaseable: boolean | nil,
          requested_reviewers: [GitHubOpenAPI.SimpleUser.t()] | nil,
          requested_teams: [GitHubOpenAPI.TeamSimple.t()] | nil,
          review_comment_url: String.t(),
          review_comments: integer,
          review_comments_url: String.t(),
          state: String.t(),
          statuses_url: String.t(),
          title: String.t(),
          updated_at: DateTime.t(),
          url: String.t(),
          user: GitHubOpenAPI.SimpleUser.t()
        }

  defstruct [
    :__info__,
    :__joins__,
    :_links,
    :active_lock_reason,
    :additions,
    :assignee,
    :assignees,
    :author_association,
    :auto_merge,
    :base,
    :body,
    :changed_files,
    :closed_at,
    :comments,
    :comments_url,
    :commits,
    :commits_url,
    :created_at,
    :deletions,
    :diff_url,
    :draft,
    :head,
    :html_url,
    :id,
    :issue_url,
    :labels,
    :locked,
    :maintainer_can_modify,
    :merge_commit_sha,
    :mergeable,
    :mergeable_state,
    :merged,
    :merged_at,
    :merged_by,
    :milestone,
    :node_id,
    :number,
    :patch_url,
    :rebaseable,
    :requested_reviewers,
    :requested_teams,
    :review_comment_url,
    :review_comments,
    :review_comments_url,
    :state,
    :statuses_url,
    :title,
    :updated_at,
    :url,
    :user
  ]

  @doc false
  @spec __fields__(atom) :: keyword
  def __fields__(type \\ :t)

  def __fields__(:t) do
    [
      _links: {GitHubOpenAPI.PullRequestLinks, :t},
      active_lock_reason: {:union, [{:string, :generic}, :null]},
      additions: :integer,
      assignee: {:union, [{GitHubOpenAPI.SimpleUser, :t}, :null]},
      assignees: {:union, [[{GitHubOpenAPI.SimpleUser, :t}], :null]},
      author_association:
        {:enum,
         [
           "COLLABORATOR",
           "CONTRIBUTOR",
           "FIRST_TIMER",
           "FIRST_TIME_CONTRIBUTOR",
           "MANNEQUIN",
           "MEMBER",
           "NONE",
           "OWNER"
         ]},
      auto_merge: {:union, [{GitHubOpenAPI.AutoMerge, :t}, :null]},
      base: {GitHubOpenAPI.PullRequestBase, :t},
      body: {:union, [{:string, :generic}, :null]},
      changed_files: :integer,
      closed_at: {:union, [{:string, :date_time}, :null]},
      comments: :integer,
      comments_url: {:string, :uri},
      commits: :integer,
      commits_url: {:string, :uri},
      created_at: {:string, :date_time},
      deletions: :integer,
      diff_url: {:string, :uri},
      draft: :boolean,
      head: {GitHubOpenAPI.PullRequestHead, :t},
      html_url: {:string, :uri},
      id: :integer,
      issue_url: {:string, :uri},
      labels: [{GitHubOpenAPI.PullRequestLabels, :t}],
      locked: :boolean,
      maintainer_can_modify: :boolean,
      merge_commit_sha: {:union, [{:string, :generic}, :null]},
      mergeable: {:union, [:boolean, :null]},
      mergeable_state: {:string, :generic},
      merged: :boolean,
      merged_at: {:union, [{:string, :date_time}, :null]},
      merged_by: {:union, [{GitHubOpenAPI.SimpleUser, :t}, :null]},
      milestone: {:union, [{GitHubOpenAPI.Milestone, :t}, :null]},
      node_id: {:string, :generic},
      number: :integer,
      patch_url: {:string, :uri},
      rebaseable: {:union, [:boolean, :null]},
      requested_reviewers: {:union, [[{GitHubOpenAPI.SimpleUser, :t}], :null]},
      requested_teams: {:union, [[{GitHubOpenAPI.TeamSimple, :t}], :null]},
      review_comment_url: {:string, :generic},
      review_comments: :integer,
      review_comments_url: {:string, :uri},
      state: {:enum, ["open", "closed"]},
      statuses_url: {:string, :uri},
      title: {:string, :generic},
      updated_at: {:string, :date_time},
      url: {:string, :uri},
      user: {GitHubOpenAPI.SimpleUser, :t}
    ]
  end
end
